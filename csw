// Consider a scenario where you are tasked with developing a simple banking application using Java, employing the concept of polymorphism. Your application should consist of three classes: Account, SavingsAccount, and CurrentAccount. The Account class serves as the base class with private attributes for account number and balance, along with abstract methods for deposit and withdrawal. The SavingsAccount class, a subclass of Account, should include an additional attribute for interest rate and override the deposit method to calculate interest, as well as override the withdrawal method to ensure a sufficient balance. Similarly, the CurrentAccount class, also a subclass of Account, should incorporate an overdraft limit attribute and override the withdrawal method to check the overdraft limit. Implement the classes as described, ensuring proper encapsulation and abstraction. Finally, create a BankingApplication class (Main) to demonstrate the polymorphic behavior by creating instances of both SavingsAccount and CurrentAccount, testing deposit and withdrawal operations, and displaying account details.

package Assingments.Assingment_CH12;

// abstract class Account {
//     private int accountNumber;
//     private double balance;

//     public Account(int accountNumber, double balance) {
//         this.accountNumber = accountNumber;
//         this.balance = balance;
//     }

//     public abstract void deposit(double amount);
//     public abstract void withdraw(double amount);

//     public int getAccountNumber() {
//         return accountNumber;
//     }

//     public double getBalance() {
//         return balance;
//     }
// }

// class SavingsAccount extends Account {
//     private double interestRate;

//     public SavingsAccount(int accountNumber, double balance, double interestRate) {
//         super(accountNumber, balance);
//         this.interestRate = interestRate;
//     }

//     @Override
//     public void deposit(double amount) {
//         double interest = amount * (interestRate / 100);
//         deposit(amount + interest);
//     }

//     @Override
//     public void withdraw(double amount) {
//         if (amount <= getBalance()) {
//             withdraw(amount);
//         } 
//         else {
//             System.out.println("Insufficient balance");
//         }
//     }
// }

// class CurrentAccount extends Account {
//     private double overdraftLimit;

//     public CurrentAccount(int accountNumber, double balance, double overdraftLimit) {
//         super(accountNumber, balance);
//         this.overdraftLimit = overdraftLimit;
//     }

//     @Override
//     public void withdraw(double amount) {
//         if (getBalance() + overdraftLimit >= amount) {
//             withdraw(amount);
//         }
//         else {
//             System.out.println("Exceeds overdraft limit");
//         }
//     }

//     @Override
//     public void deposit(double amount) {
//         System.out.println("Current balance: " + getBalance());
//     }

// }

// public class Q7 {
//     public static void main(String[] args) {
//         Account savingAccount = new SavingsAccount(123456, 1000, 5);

//         savingAccount.deposit(500);
//         savingAccount.withdraw(200);

//         System.out.println("Saving Account Details: ");
//         displayAccountDetails(savingAccount);
//         System.out.println();

//         Account currentAccount = new CurrentAccount(987654, 2000, 1000);

//         currentAccount.deposit(500);
//         currentAccount.withdraw(200);
//     }

//     public static void displayAccountDetails(Account account) {
//         System.out.println("Account Number: " + account.getAccountNumber());
//         System.out.println("Balance: " + account.getBalance());
//     }
// }

abstract class Account {
    private int accountNumber;
    protected double balance;

    public Account(int accountNumber, double balance) {
        this.accountNumber = accountNumber;
        this.balance = balance;
    }

    public abstract void deposit(double amount);

    public abstract void withdraw(double amount);

    public void display() {
        System.out.println("Account Number: " + accountNumber);
        System.out.println("Balance: " + balance);
    }
}

class SavingsAccount extends Account {
    private double interestRate;

    public SavingsAccount(int accountNumber,double balance, double interestRate) {
        super(accountNumber, balance);
        this.interestRate = interestRate;
    }

    @Override
    public void deposit(double amount) {
        balance = balance + amount + (amount * interestRate / 100);
        System.out.println(amount + " deposit into saving account.");
    }

    @Override
    public void withdraw(double amount) {
        if (balance >= amount) {
            balance = balance - amount;
            System.out.println(amount + " withdraw from savings account.");
        }
        else {
            System.out.println("Insufficient funds in saving account.");
        }
    }
}

class CurrentAccount extends Account {
    private double overdraftLimit;

    public CurrentAccount(int accountNumber, double balance, double overdraftLimit) {
        super(accountNumber, balance);
        this.overdraftLimit = overdraftLimit;
    }

    @Override
    public void deposit(double amount) {
        balance = balance + amount;
        System.out.println(amount + " deposited into current account.");
    }

    @Override
    public void withdraw(double amount) {
        if (balance + overdraftLimit >= amount) {
            balance = balance - amount;
            System.out.println(amount + " withdrawn from current account.");
        }
        else {
            System.out.println("Withdrawal amount exceeds overdraft limit.");
        }
    }
}

public class Q7 {
    public static void main(String[] args) {
        SavingsAccount SA = new SavingsAccount(1001, 5000, 5.0);
        CurrentAccount CA = new CurrentAccount(2001, 3000, 2000);

        SA.deposit(1000);
        SA.withdraw(200);
        System.out.println();

        CA.deposit(500);
        CA.withdraw(4000);
        CA.display();
    }
}