Q1. Create a functional interface Calculator with methods for addition, 
subtraction, multiplication, and division. Implement these methods using 
lambda expressions. Define the Calculator functional interface with methods for 
arithmetic operations. Implement the interface methods using lambda 
expressions for basic arithmetic operations.
Q2. Write a program that sorts a list of strings based on their lengths in 
descending order. Define a custom comparator using a lambda expression that 
compares strings based on their lengths. Use the custom comparator to sort the 
list of strings in descending order of length.
Q3. Write a program that demonstrates lazy evaluation by creating a lazy 
sequence of prime numbers. Define a lazy sequence using lambda expressions 
that generates prime numbers. Demonstrate lazy evaluation by printing the first 
few prime numbers from the lazy sequence.
Q4. Create a functional interface Shape with a method double area() and a 
default method void printArea(). Implement the interface using lambda 
expressions for different shapes. Define the Shape functional interface with an 
area method. Implement the interface for shapes like circle, square, and 
rectangle using lambda expressions. Use the default method to print the area of 
each shape.
Q5. Write a program that reads a list of strings, converts them to uppercase, 
filters out the strings starting with a vowel, and then prints the remaining 
strings.
Q6. Write a program that demonstrates a function returning another function, 
where the inner function calculates the square of a number. Define a function 
that returns another function. The inner function should calculate the square of a 
given number. Demonstrate the use of the returned function to calculate squares.





ans 3.

public class StringLengthSorter {
    public static void main(String[] args) {
        // List of strings
        List<String> strings = new ArrayList<>();
        strings.add("apple");
        strings.add("banana");
        strings.add("kiwi");
        strings.add("orange");
        strings.add("grape");

        // Define custom comparator using lambda expression
        Comparator<String> lengthComparator = (s1, s2) -> Integer.compare(s2.length(), s1.length());

        // Sort the list based on string lengths in descending order
        Collections.sort(strings, lengthComparator);

        // Print the sorted list
        System.out.println(strings);
    }
}